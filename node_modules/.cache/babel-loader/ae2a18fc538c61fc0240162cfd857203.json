{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nimport { sampleGet } from \"../../api/sample\"; // state の型\n\n// state の初期値\nconst initialState = {\n  someNum: 0,\n  someStr: \"\",\n  someList: [],\n  isFetching: false\n}; // actions と reducers の定義\n\nconst modules = createSlice({\n  name: \"sample\",\n  initialState: initialState,\n  reducers: {\n    changeNum: (state, action) => {\n      state.someNum = action.payload;\n    },\n    changeStr: (state, action) => {\n      state.someStr = action.payload;\n    },\n    addList: (state, action) => {\n      state.someList = [...state.someList, action.payload];\n    },\n    initialize: state => {\n      state.someNum = initialState.someNum;\n      state.someStr = initialState.someStr;\n      state.someList = initialState.someList;\n    },\n    fetchStart: (state, action) => {\n      console.log(action.payload);\n      state.isFetching = true;\n    },\n    fetchEnd: (state, action) => {\n      console.log(action.payload);\n      state.isFetching = false;\n    }\n  }\n}); // 非同期処理 (APIとの通信)\n\nexport const sampleAsyncGet = (data1, data2) => async dispatch => {\n  dispatch(modules.actions.fetchStart({\n    data1: data1,\n    data2: data2\n  }));\n\n  try {\n    const res = await sampleGet(data1, data2);\n    dispatch(modules.actions.fetchEnd(res));\n  } catch (err) {\n    dispatch(modules.actions.fetchEnd(err));\n  }\n};\nexport default modules;","map":{"version":3,"sources":["/Users/hasegawamasaki/sagyou/frontend-template-master/src/redux/modules/sampleModule.ts"],"names":["createSlice","sampleGet","initialState","someNum","someStr","someList","isFetching","modules","name","reducers","changeNum","state","action","payload","changeStr","addList","initialize","fetchStart","console","log","fetchEnd","sampleAsyncGet","data1","data2","dispatch","actions","res","err"],"mappings":"AAAA,SAASA,WAAT,QAA2C,kBAA3C;AAIA,SAASC,SAAT,QAA0B,kBAA1B,C,CAEA;;AAQA;AACA,MAAMC,YAAyB,GAAG;AAChCC,EAAAA,OAAO,EAAE,CADuB;AAEhCC,EAAAA,OAAO,EAAE,EAFuB;AAGhCC,EAAAA,QAAQ,EAAE,EAHsB;AAIhCC,EAAAA,UAAU,EAAE;AAJoB,CAAlC,C,CAOA;;AACA,MAAMC,OAAO,GAAGP,WAAW,CAAC;AAC1BQ,EAAAA,IAAI,EAAE,QADoB;AAE1BN,EAAAA,YAAY,EAAEA,YAFY;AAG1BO,EAAAA,QAAQ,EAAE;AACRC,IAAAA,SAAS,EAAE,CAACC,KAAD,EAAQC,MAAR,KAA0D;AACnED,MAAAA,KAAK,CAACR,OAAN,GAAgBS,MAAM,CAACC,OAAvB;AACD,KAHO;AAIRC,IAAAA,SAAS,EAAE,CAACH,KAAD,EAAQC,MAAR,KAA0D;AACnED,MAAAA,KAAK,CAACP,OAAN,GAAgBQ,MAAM,CAACC,OAAvB;AACD,KANO;AAORE,IAAAA,OAAO,EAAE,CAACJ,KAAD,EAAQC,MAAR,KAA0C;AACjDD,MAAAA,KAAK,CAACN,QAAN,GAAiB,CAAC,GAAGM,KAAK,CAACN,QAAV,EAAoBO,MAAM,CAACC,OAA3B,CAAjB;AACD,KATO;AAURG,IAAAA,UAAU,EAAEL,KAAK,IAAI;AACnBA,MAAAA,KAAK,CAACR,OAAN,GAAgBD,YAAY,CAACC,OAA7B;AACAQ,MAAAA,KAAK,CAACP,OAAN,GAAgBF,YAAY,CAACE,OAA7B;AACAO,MAAAA,KAAK,CAACN,QAAN,GAAiBH,YAAY,CAACG,QAA9B;AACD,KAdO;AAeRY,IAAAA,UAAU,EAAE,CAACN,KAAD,EAAQC,MAAR,KAAuC;AACjDM,MAAAA,OAAO,CAACC,GAAR,CAAYP,MAAM,CAACC,OAAnB;AACAF,MAAAA,KAAK,CAACL,UAAN,GAAmB,IAAnB;AACD,KAlBO;AAmBRc,IAAAA,QAAQ,EAAE,CAACT,KAAD,EAAQC,MAAR,KAAuC;AAC/CM,MAAAA,OAAO,CAACC,GAAR,CAAYP,MAAM,CAACC,OAAnB;AACAF,MAAAA,KAAK,CAACL,UAAN,GAAmB,KAAnB;AACD;AAtBO;AAHgB,CAAD,CAA3B,C,CA6BA;;AACA,OAAO,MAAMe,cAAc,GAAG,CAC5BC,KAD4B,EAE5BC,KAF4B,KAGf,MAAMC,QAAN,IAAkB;AAC/BA,EAAAA,QAAQ,CACNjB,OAAO,CAACkB,OAAR,CAAgBR,UAAhB,CAA2B;AACzBK,IAAAA,KAAK,EAAEA,KADkB;AAEzBC,IAAAA,KAAK,EAAEA;AAFkB,GAA3B,CADM,CAAR;;AAMA,MAAI;AACF,UAAMG,GAAG,GAAG,MAAMzB,SAAS,CAACqB,KAAD,EAAQC,KAAR,CAA3B;AACAC,IAAAA,QAAQ,CAACjB,OAAO,CAACkB,OAAR,CAAgBL,QAAhB,CAAyBM,GAAzB,CAAD,CAAR;AACD,GAHD,CAGE,OAAOC,GAAP,EAAY;AACZH,IAAAA,QAAQ,CAACjB,OAAO,CAACkB,OAAR,CAAgBL,QAAhB,CAAyBO,GAAzB,CAAD,CAAR;AACD;AACF,CAhBM;AAkBP,eAAepB,OAAf","sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { AppThunk } from \"../store\";\n\nimport { Sample } from \"../../utils/types\";\nimport { sampleGet } from \"../../api/sample\";\n\n// state の型\nexport interface SampleState {\n  someNum: number;\n  someStr: string;\n  someList: Sample[];\n  isFetching: boolean;\n}\n\n// state の初期値\nconst initialState: SampleState = {\n  someNum: 0,\n  someStr: \"\",\n  someList: [],\n  isFetching: false\n};\n\n// actions と reducers の定義\nconst modules = createSlice({\n  name: \"sample\",\n  initialState: initialState,\n  reducers: {\n    changeNum: (state, action: PayloadAction<SampleState[\"someNum\"]>) => {\n      state.someNum = action.payload;\n    },\n    changeStr: (state, action: PayloadAction<SampleState[\"someStr\"]>) => {\n      state.someStr = action.payload;\n    },\n    addList: (state, action: PayloadAction<Sample>) => {\n      state.someList = [...state.someList, action.payload];\n    },\n    initialize: state => {\n      state.someNum = initialState.someNum;\n      state.someStr = initialState.someStr;\n      state.someList = initialState.someList;\n    },\n    fetchStart: (state, action: PayloadAction<any>) => {\n      console.log(action.payload);\n      state.isFetching = true;\n    },\n    fetchEnd: (state, action: PayloadAction<any>) => {\n      console.log(action.payload);\n      state.isFetching = false;\n    }\n  }\n});\n\n// 非同期処理 (APIとの通信)\nexport const sampleAsyncGet = (\n  data1: string,\n  data2: string\n): AppThunk => async dispatch => {\n  dispatch(\n    modules.actions.fetchStart({\n      data1: data1,\n      data2: data2\n    })\n  );\n  try {\n    const res = await sampleGet(data1, data2);\n    dispatch(modules.actions.fetchEnd(res));\n  } catch (err) {\n    dispatch(modules.actions.fetchEnd(err));\n  }\n};\n\nexport default modules;\n"]},"metadata":{},"sourceType":"module"}